/*
 * This file is automatically generated by UnitTestBot. For further information see https://github.com/UnitTestBot/UTBotCpp
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2021. All rights reserved.
 */

#include "struct_arrays_test.h"

#include "gtest/gtest.h"
namespace UTBot {
static const float utbot_abs_error = 1e-6;
// Some tests for function 'index_of_needed_struct' were skipped, as execution of function is out of timeout.

// Some tests for function 'index_of_struct_with_equal_fields' were skipped, as execution of function is out of timeout.



#pragma region regression

TEST(regression, index_of_needed_struct_test_1)
{
    __attribute__ ((aligned(1))) struct CharAndInt arr[10] = {{'p', 0}, {'c', 0}, {'h', 0}, {'s', 0}, {'k', 0}, {'a', 0}, {'s', 0}, {'g', 0}, {'k', 0}, {'p', 0}};
    int actual = index_of_needed_struct(arr);
    EXPECT_EQ(-1, actual);
    struct CharAndInt expected_arr[10] = {{'p', 0}, {'c', 0}, {'h', 0}, {'s', 0}, {'k', 0}, {'a', 0}, {'s', 0}, {'g', 0}, {'k', 0}, {'p', 0}};
    for (int it_3_0 = 0; it_3_0 < 10; it_3_0 ++) {
        EXPECT_EQ(expected_arr[it_3_0].c, arr[it_3_0].c);
        EXPECT_EQ(expected_arr[it_3_0].x, arr[it_3_0].x);
    }
}

TEST(regression, index_of_needed_struct_test_2)
{
    __attribute__ ((aligned(1))) struct CharAndInt arr[10] = {{'p', 0}, {'c', 0}, {'c', 128}, {'c', 0}, {'c', 0}, {'c', 0}, {'c', 0}, {'c', 0}, {'a', 0}, {'c', 0}};
    int actual = index_of_needed_struct(arr);
    EXPECT_EQ(2, actual);
    struct CharAndInt expected_arr[10] = {{'p', 0}, {'c', 0}, {'c', 128}, {'c', 0}, {'c', 0}, {'c', 0}, {'c', 0}, {'c', 0}, {'a', 0}, {'c', 0}};
    for (int it_3_0 = 0; it_3_0 < 10; it_3_0 ++) {
        EXPECT_EQ(expected_arr[it_3_0].c, arr[it_3_0].c);
        EXPECT_EQ(expected_arr[it_3_0].x, arr[it_3_0].x);
    }
}


TEST(regression, index_of_struct_with_equal_fields_test_1)
{
    __attribute__ ((aligned(1))) struct Trio arr[10] = {{0, 8LL, 0}, {8, 8LL, 0}, {0, 1LL, 0}, {0, 8LL, 0}, {0, 2LL, 0}, {0, 2LL, 0}, {0, 4LL, 0}, {0, 8LL, 0}, {0, 8LL, 0}, {0, 4LL, 0}};
    int actual = index_of_struct_with_equal_fields(arr);
    EXPECT_EQ(-1, actual);
    struct Trio expected_arr[10] = {{0, 8LL, 0}, {8, 8LL, 0}, {0, 1LL, 0}, {0, 8LL, 0}, {0, 2LL, 0}, {0, 2LL, 0}, {0, 4LL, 0}, {0, 8LL, 0}, {0, 8LL, 0}, {0, 4LL, 0}};
    for (int it_3_0 = 0; it_3_0 < 10; it_3_0 ++) {
        EXPECT_EQ(expected_arr[it_3_0].a, arr[it_3_0].a);
        EXPECT_EQ(expected_arr[it_3_0].b, arr[it_3_0].b);
        EXPECT_EQ(expected_arr[it_3_0].c, arr[it_3_0].c);
    }
}

#pragma endregion
}
