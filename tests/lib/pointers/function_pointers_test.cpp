/*
 * This file is automatically generated by UnitTestBot. For further information see https://github.com/UnitTestBot/UTBotCpp
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2021. All rights reserved.
 */

#include "function_pointers_test.h"

#include "gtest/gtest.h"
namespace UTBot {
static const float utbot_abs_error = 1e-6;
// Some tests for function 'get_chain' were skipped, as execution of function is out of timeout.

int f_symbolic[10];
static int FStruct_f_stub(int param1, int param2) {
    static int firstTimeCall = 1;
    static int cntCall = 0;
    #ifdef KLEE_MODE
        if (firstTimeCall == 1) {
            firstTimeCall = 0;
            klee_make_symbolic(&f_symbolic, sizeof(f_symbolic), "f_symbolic");
            for (int it_10_0 = 0; it_10_0 < 10; it_10_0 ++) {
                klee_prefer_cex(f_symbolic, f_symbolic[it_10_0] >= -10  & f_symbolic[it_10_0] <= 10);
            }
        }
    #endif
    if (cntCall == 10) {
        cntCall--;
    }
    return f_symbolic[cntCall++];
}

static Return * Container_f_stub(Param * param1) {
    return NULL;
}



#pragma region regression

TEST(regression, worker_test_1)
{
    int actual = worker(0, 0);
    EXPECT_EQ(0, actual);
}

typedef int (*receiver_f_arg)(int, int);
int f_symbolic[10];
int _receiver_f_stub(int param1, int param2) {
    static int firstTimeCall = 1;
    static int cntCall = 0;
    #ifdef KLEE_MODE
        if (firstTimeCall == 1) {
            firstTimeCall = 0;
            klee_make_symbolic(&f_symbolic, sizeof(f_symbolic), "f_symbolic");
            for (int it_10_0 = 0; it_10_0 < 10; it_10_0 ++) {
                klee_prefer_cex(f_symbolic, f_symbolic[it_10_0] >= -10  & f_symbolic[it_10_0] <= 10);
            }
        }
    #endif
    if (cntCall == 10) {
        cntCall--;
    }
    return f_symbolic[cntCall++];
}

extern "C" int f_symbolic;

TEST(regression, receiver_test_1)
{
    int actual = receiver(_receiver_f_stub, 'c');
    EXPECT_EQ(-1, actual);
}

TEST(regression, receiver_test_2)
{
    f_symbolic = 0;
    int f_symbolic_buffer[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    memcpy((void *) f_symbolic, f_symbolic_buffer, sizeof(f_symbolic_buffer));
    int actual = receiver(_receiver_f_stub, 'a');
    EXPECT_EQ(0, actual);
}

TEST(regression, receiver_test_3)
{
    f_symbolic = 0;
    int f_symbolic_buffer[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    memcpy((void *) f_symbolic, f_symbolic_buffer, sizeof(f_symbolic_buffer));
    int actual = receiver(_receiver_f_stub, 'b');
    EXPECT_EQ(8, actual);
}


TEST(regression, entry_point_func_test_1)
{
    entry_point_func();
}

typedef char * (*pointerParam_f_arg)(int *);
char * _pointerParam_f_stub(int * param1) {
    return "";
}


TEST(regression, pointerParam_test_1)
{
    int x = 0;
    char actual = *pointerParam(_pointerParam_f_stub, &x);
    EXPECT_EQ('\0', actual);
    int expected_x = 0;
    EXPECT_EQ(expected_x, x);
}

TEST(regression, pointerParam_test_2)
{
    int x = 1;
    char actual = *pointerParam(_pointerParam_f_stub, &x);
    EXPECT_EQ('\0', actual);
    int expected_x = 1;
    EXPECT_EQ(expected_x, x);
}

typedef int (*pointerToPointer_f_arg)(int);
typedef int (**pointerToPointer_f_arg_arr)(int);
int f_symbolic[10];
int _pointerToPointer_f_stub(int param1) {
    static int firstTimeCall = 1;
    static int cntCall = 0;
    #ifdef KLEE_MODE
        if (firstTimeCall == 1) {
            firstTimeCall = 0;
            klee_make_symbolic(&f_symbolic, sizeof(f_symbolic), "f_symbolic");
            for (int it_10_0 = 0; it_10_0 < 10; it_10_0 ++) {
                klee_prefer_cex(f_symbolic, f_symbolic[it_10_0] >= -10  & f_symbolic[it_10_0] <= 10);
            }
        }
    #endif
    if (cntCall == 10) {
        cntCall--;
    }
    return f_symbolic[cntCall++];
}

extern "C" int f_symbolic;

TEST(regression, pointerToPointer_test_1)
{
    f_symbolic = 0;
    pointerToPointer_f_arg f[10];
    for (int i = 0; i < 10; i ++) {
        f[i] = *_pointerToPointer_f_stub;
    }
    int f_symbolic_buffer[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    memcpy((void *) f_symbolic, f_symbolic_buffer, sizeof(f_symbolic_buffer));
    char actual = pointerToPointer(f, 'c');
    EXPECT_EQ('z', actual);
}

TEST(regression, pointerToPointer_test_2)
{
    f_symbolic = 4;
    pointerToPointer_f_arg f[10];
    for (int i = 0; i < 10; i ++) {
        f[i] = *_pointerToPointer_f_stub;
    }
    int f_symbolic_buffer[10] = {4, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    memcpy((void *) f_symbolic, f_symbolic_buffer, sizeof(f_symbolic_buffer));
    char actual = pointerToPointer(f, 'c');
    EXPECT_EQ('c', actual);
}

typedef int (*structParam_f_arg)(struct MyStruct);
int f_symbolic[10];
int _structParam_f_stub(struct MyStruct param1) {
    static int firstTimeCall = 1;
    static int cntCall = 0;
    #ifdef KLEE_MODE
        if (firstTimeCall == 1) {
            firstTimeCall = 0;
            klee_make_symbolic(&f_symbolic, sizeof(f_symbolic), "f_symbolic");
            for (int it_10_0 = 0; it_10_0 < 10; it_10_0 ++) {
                klee_prefer_cex(f_symbolic, f_symbolic[it_10_0] >= -10  & f_symbolic[it_10_0] <= 10);
            }
        }
    #endif
    if (cntCall == 10) {
        cntCall--;
    }
    return f_symbolic[cntCall++];
}

extern "C" int f_symbolic;

TEST(regression, structParam_test_1)
{
    f_symbolic = 0;
    char s[] = "qbccaccbcq";
    int f_symbolic_buffer[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    memcpy((void *) f_symbolic, f_symbolic_buffer, sizeof(f_symbolic_buffer));
    int actual = structParam(_structParam_f_stub, s);
    EXPECT_EQ(0, actual);
}

TEST(regression, structParam_test_2)
{
    f_symbolic = 0;
    char s[] = "zbccaccbcz";
    int f_symbolic_buffer[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    memcpy((void *) f_symbolic, f_symbolic_buffer, sizeof(f_symbolic_buffer));
    int actual = structParam(_structParam_f_stub, s);
    EXPECT_EQ(0, actual);
}

TEST(regression, structParam_test_3)
{
    f_symbolic = 0;
    char s[] = "abccaccbca";
    int f_symbolic_buffer[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    memcpy((void *) f_symbolic, f_symbolic_buffer, sizeof(f_symbolic_buffer));
    int actual = structParam(_structParam_f_stub, s);
    EXPECT_EQ(6, actual);
}

typedef int (*structPointerParam_f_arg)(struct MyStruct *);
int f_symbolic[10];
int _structPointerParam_f_stub(struct MyStruct * param1) {
    static int firstTimeCall = 1;
    static int cntCall = 0;
    #ifdef KLEE_MODE
        if (firstTimeCall == 1) {
            firstTimeCall = 0;
            klee_make_symbolic(&f_symbolic, sizeof(f_symbolic), "f_symbolic");
            for (int it_10_0 = 0; it_10_0 < 10; it_10_0 ++) {
                klee_prefer_cex(f_symbolic, f_symbolic[it_10_0] >= -10  & f_symbolic[it_10_0] <= 10);
            }
        }
    #endif
    if (cntCall == 10) {
        cntCall--;
    }
    return f_symbolic[cntCall++];
}

extern "C" int f_symbolic;

TEST(regression, structPointerParam_test_1)
{
    f_symbolic = 0;
    __attribute__ ((aligned(1))) int arr[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    int f_symbolic_buffer[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    memcpy((void *) f_symbolic, f_symbolic_buffer, sizeof(f_symbolic_buffer));
    int actual = structPointerParam(_structPointerParam_f_stub, arr);
    EXPECT_EQ(0, actual);
}

TEST(regression, structPointerParam_test_2)
{
    f_symbolic = 0;
    __attribute__ ((aligned(1))) int arr[10] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    int f_symbolic_buffer[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    memcpy((void *) f_symbolic, f_symbolic_buffer, sizeof(f_symbolic_buffer));
    int actual = structPointerParam(_structPointerParam_f_stub, arr);
    EXPECT_EQ(12, actual);
}

TEST(regression, structPointerParam_test_3)
{
    f_symbolic = 0;
    __attribute__ ((aligned(1))) int arr[10] = {0, 34, 0, 0, 0, 0, 0, 0, 0, 0};
    int f_symbolic_buffer[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    memcpy((void *) f_symbolic, f_symbolic_buffer, sizeof(f_symbolic_buffer));
    int actual = structPointerParam(_structPointerParam_f_stub, arr);
    EXPECT_EQ(1, actual);
}


TEST(regression, f_add_test_1)
{
    int actual = f_add(0, 0);
    EXPECT_EQ(0, actual);
}


TEST(regression, f_sub_test_1)
{
    int actual = f_sub(0, 0);
    EXPECT_EQ(0, actual);
}


TEST(regression, f_mul_test_1)
{
    int actual = f_mul(0, 0);
    EXPECT_EQ(0, actual);
}

typedef int (*return_op_return_op_return_arg)(int, int);
int return_op_return_symbolic[10];
int _return_op_return_op_return_stub(int param1, int param2) {
    static int firstTimeCall = 1;
    static int cntCall = 0;
    #ifdef KLEE_MODE
        if (firstTimeCall == 1) {
            firstTimeCall = 0;
            klee_make_symbolic(&return_op_return_symbolic, sizeof(return_op_return_symbolic), "return_op_return_symbolic");
            for (int it_25_0 = 0; it_25_0 < 10; it_25_0 ++) {
                klee_prefer_cex(return_op_return_symbolic, return_op_return_symbolic[it_25_0] >= -10  & return_op_return_symbolic[it_25_0] <= 10);
            }
        }
    #endif
    if (cntCall == 10) {
        cntCall--;
    }
    return return_op_return_symbolic[cntCall++];
}


TEST(regression, return_op_test_1)
{
    return_op('c');
}

TEST(regression, return_op_test_2)
{
    return_op('*');
}

TEST(regression, return_op_test_3)
{
    return_op('+');
}

TEST(regression, return_op_test_4)
{
    return_op('-');
}

typedef int (*f_chain_functions_arg)(int, int);
typedef int (**f_chain_functions_arg_arr)(int, int);
int functions_symbolic[10];
int _f_chain_functions_stub(int param1, int param2) {
    static int firstTimeCall = 1;
    static int cntCall = 0;
    #ifdef KLEE_MODE
        if (firstTimeCall == 1) {
            firstTimeCall = 0;
            klee_make_symbolic(&functions_symbolic, sizeof(functions_symbolic), "functions_symbolic");
            for (int it_18_0 = 0; it_18_0 < 10; it_18_0 ++) {
                klee_prefer_cex(functions_symbolic, functions_symbolic[it_18_0] >= -10  & functions_symbolic[it_18_0] <= 10);
            }
        }
    #endif
    if (cntCall == 10) {
        cntCall--;
    }
    return functions_symbolic[cntCall++];
}


TEST(regression, f_chain_test_1)
{
    f_chain_functions_arg functions[10];
    for (int i = 0; i < 10; i ++) {
        functions[i] = *_f_chain_functions_stub;
    }
    int functions_symbolic_buffer[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    memcpy((void *) functions_symbolic, functions_symbolic_buffer, sizeof(functions_symbolic_buffer));
    int actual = f_chain(functions, 0);
    EXPECT_EQ(0, actual);
}

typedef int (*get_chain_get_chain_return_arg)(int, int);
typedef int (**get_chain_get_chain_return_arg_arr)(int, int);
int get_chain_return_symbolic[10];
int _get_chain_get_chain_return_stub(int param1, int param2) {
    static int firstTimeCall = 1;
    static int cntCall = 0;
    #ifdef KLEE_MODE
        if (firstTimeCall == 1) {
            firstTimeCall = 0;
            klee_make_symbolic(&get_chain_return_symbolic, sizeof(get_chain_return_symbolic), "get_chain_return_symbolic");
            for (int it_25_0 = 0; it_25_0 < 10; it_25_0 ++) {
                klee_prefer_cex(get_chain_return_symbolic, get_chain_return_symbolic[it_25_0] >= -10  & get_chain_return_symbolic[it_25_0] <= 10);
            }
        }
    #endif
    if (cntCall == 10) {
        cntCall--;
    }
    return get_chain_return_symbolic[cntCall++];
}


TEST(regression, get_chain_test_1)
{
    char c[] = "c*******cc";
    *(unsigned char *)get_chain(c);
    char expected_c[] = {'c', '*', '*', '*', '*', '*', '*', '*', 'c', '\0'};
    for (int it_1_0 = 0; it_1_0 < 10; it_1_0 ++) {
        EXPECT_EQ(expected_c[it_1_0], c[it_1_0]);
    }
}

TEST(regression, get_chain_test_2)
{
    char c[] = "c*******+c";
    *(unsigned char *)get_chain(c);
    char expected_c[] = {'c', '*', '*', '*', '*', '*', '*', '*', '+', '\0'};
    for (int it_1_0 = 0; it_1_0 < 10; it_1_0 ++) {
        EXPECT_EQ(expected_c[it_1_0], c[it_1_0]);
    }
}

TEST(regression, get_chain_test_3)
{
    char c[] = "c*******-c";
    *(unsigned char *)get_chain(c);
    char expected_c[] = {'c', '*', '*', '*', '*', '*', '*', '*', '-', '\0'};
    for (int it_1_0 = 0; it_1_0 < 10; it_1_0 ++) {
        EXPECT_EQ(expected_c[it_1_0], c[it_1_0]);
    }
}

extern "C" int f_symbolic;

TEST(regression, calcFunctionStruct_test_1)
{
    f_symbolic = 0;
    int actual = calcFunctionStruct({0, FStruct_f_stub}, 0);
    EXPECT_EQ(0, actual);
}

TEST(regression, calcFunctionStruct_test_2)
{
    f_symbolic = 0;
    int actual = calcFunctionStruct({0, FStruct_f_stub}, 2);
    EXPECT_EQ(0, actual);
}


TEST(regression, apply_stub_test_1)
{
    struct Param param = {0};
    int actual = apply_stub({Container_f_stub}, &param);
    EXPECT_EQ(0, actual);
    struct Param expected_param = {0};
    EXPECT_EQ(expected_param.x, param.x);
}

#pragma endregion
#pragma region error
TEST(error, apply_test_1)
{
    struct Param param = {0};
    apply({Container_f_stub}, &param);
    struct Param expected_param = {0};
    EXPECT_EQ(expected_param.x, param.x);
}

#pragma endregion
}
