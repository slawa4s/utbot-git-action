/*
 * This file is automatically generated by UnitTestBot. For further information seehttps://unittestbot.org
 */

#include "function_pointers_dot_c_test.h"

#include "gtest/gtest.h"
namespace UTBot {
static const float utbot_abs_error = 1e-6;
// Some tests for function 'get_chain' were skipped, as execution of function is out of timeout.

int FStruct_f_symbolic[10];
static int FStruct_f_stub(int param1, int param2) {
    static int firstTimeCall = 1;
    static int cntCall = 0;
    #ifdef KLEE_MODE
        if (firstTimeCall == 1) {
            firstTimeCall = 0;
            klee_make_symbolic(&FStruct_f_symbolic, sizeof(FStruct_f_symbolic), "FStruct_f_symbolic");
            for (int it_165_0 = 0; it_165_0 < 10; it_165_0 ++) {
                klee_prefer_cex(FStruct_f_symbolic, FStruct_f_symbolic[it_165_0] >= -10  & FStruct_f_symbolic[it_165_0] <= 10);
            }
        }
    #endif
    if (cntCall == 10) {
        cntCall--;
    }
    return FStruct_f_symbolic[cntCall++];
}

static Return * Container_f_stub(Param * param1) {
    return NULL;
}



typedef int (*receiver_f_arg)(int, int);
int receiver_f_symbolic[10];
int _receiver_f_stub(int param1, int param2) {
    static int firstTimeCall = 1;
    static int cntCall = 0;
    #ifdef KLEE_MODE
        if (firstTimeCall == 1) {
            firstTimeCall = 0;
            klee_make_symbolic(&receiver_f_symbolic, sizeof(receiver_f_symbolic), "receiver_f_symbolic");
            for (int it_402_0 = 0; it_402_0 < 10; it_402_0 ++) {
                klee_prefer_cex(receiver_f_symbolic, receiver_f_symbolic[it_402_0] >= -10  & receiver_f_symbolic[it_402_0] <= 10);
            }
        }
    #endif
    if (cntCall == 10) {
        cntCall--;
    }
    return receiver_f_symbolic[cntCall++];
}


typedef char * (*pointerParam_f_arg)(int *);
char * _pointerParam_f_stub(int * param1) {
    return "";
}


typedef int (*pointerToPointer_f_arg)(int);
typedef int (**pointerToPointer_f_arg_arr)(int);
int pointerToPointer_f_symbolic[10];
int _pointerToPointer_f_stub(int param1) {
    static int firstTimeCall = 1;
    static int cntCall = 0;
    #ifdef KLEE_MODE
        if (firstTimeCall == 1) {
            firstTimeCall = 0;
            klee_make_symbolic(&pointerToPointer_f_symbolic, sizeof(pointerToPointer_f_symbolic), "pointerToPointer_f_symbolic");
            for (int it_403_0 = 0; it_403_0 < 10; it_403_0 ++) {
                klee_prefer_cex(pointerToPointer_f_symbolic, pointerToPointer_f_symbolic[it_403_0] >= -10  & pointerToPointer_f_symbolic[it_403_0] <= 10);
            }
        }
    #endif
    if (cntCall == 10) {
        cntCall--;
    }
    return pointerToPointer_f_symbolic[cntCall++];
}


typedef int (*structParam_f_arg)(struct MyStruct);
int structParam_f_symbolic[10];
int _structParam_f_stub(struct MyStruct param1) {
    static int firstTimeCall = 1;
    static int cntCall = 0;
    #ifdef KLEE_MODE
        if (firstTimeCall == 1) {
            firstTimeCall = 0;
            klee_make_symbolic(&structParam_f_symbolic, sizeof(structParam_f_symbolic), "structParam_f_symbolic");
            for (int it_404_0 = 0; it_404_0 < 10; it_404_0 ++) {
                klee_prefer_cex(structParam_f_symbolic, structParam_f_symbolic[it_404_0] >= -10  & structParam_f_symbolic[it_404_0] <= 10);
            }
        }
    #endif
    if (cntCall == 10) {
        cntCall--;
    }
    return structParam_f_symbolic[cntCall++];
}


typedef int (*structPointerParam_f_arg)(struct MyStruct *);
int structPointerParam_f_symbolic[10];
int _structPointerParam_f_stub(struct MyStruct * param1) {
    static int firstTimeCall = 1;
    static int cntCall = 0;
    #ifdef KLEE_MODE
        if (firstTimeCall == 1) {
            firstTimeCall = 0;
            klee_make_symbolic(&structPointerParam_f_symbolic, sizeof(structPointerParam_f_symbolic), "structPointerParam_f_symbolic");
            for (int it_405_0 = 0; it_405_0 < 10; it_405_0 ++) {
                klee_prefer_cex(structPointerParam_f_symbolic, structPointerParam_f_symbolic[it_405_0] >= -10  & structPointerParam_f_symbolic[it_405_0] <= 10);
            }
        }
    #endif
    if (cntCall == 10) {
        cntCall--;
    }
    return structPointerParam_f_symbolic[cntCall++];
}


typedef int (*return_op_return_op_return_arg)(int, int);
int return_op_return_op_return_symbolic[10];
int _return_op_return_op_return_stub(int param1, int param2) {
    static int firstTimeCall = 1;
    static int cntCall = 0;
    #ifdef KLEE_MODE
        if (firstTimeCall == 1) {
            firstTimeCall = 0;
            klee_make_symbolic(&return_op_return_op_return_symbolic, sizeof(return_op_return_op_return_symbolic), "return_op_return_op_return_symbolic");
            for (int it_406_0 = 0; it_406_0 < 10; it_406_0 ++) {
                klee_prefer_cex(return_op_return_op_return_symbolic, return_op_return_op_return_symbolic[it_406_0] >= -10  & return_op_return_op_return_symbolic[it_406_0] <= 10);
            }
        }
    #endif
    if (cntCall == 10) {
        cntCall--;
    }
    return return_op_return_op_return_symbolic[cntCall++];
}


typedef int (*f_chain_functions_arg)(int, int);
typedef int (**f_chain_functions_arg_arr)(int, int);
int f_chain_functions_symbolic[10];
int _f_chain_functions_stub(int param1, int param2) {
    static int firstTimeCall = 1;
    static int cntCall = 0;
    #ifdef KLEE_MODE
        if (firstTimeCall == 1) {
            firstTimeCall = 0;
            klee_make_symbolic(&f_chain_functions_symbolic, sizeof(f_chain_functions_symbolic), "f_chain_functions_symbolic");
            for (int it_407_0 = 0; it_407_0 < 10; it_407_0 ++) {
                klee_prefer_cex(f_chain_functions_symbolic, f_chain_functions_symbolic[it_407_0] >= -10  & f_chain_functions_symbolic[it_407_0] <= 10);
            }
        }
    #endif
    if (cntCall == 10) {
        cntCall--;
    }
    return f_chain_functions_symbolic[cntCall++];
}


typedef int (*get_chain_get_chain_return_arg)(int, int);
typedef int (**get_chain_get_chain_return_arg_arr)(int, int);
int get_chain_get_chain_return_symbolic[10];
int _get_chain_get_chain_return_stub(int param1, int param2) {
    static int firstTimeCall = 1;
    static int cntCall = 0;
    #ifdef KLEE_MODE
        if (firstTimeCall == 1) {
            firstTimeCall = 0;
            klee_make_symbolic(&get_chain_get_chain_return_symbolic, sizeof(get_chain_get_chain_return_symbolic), "get_chain_get_chain_return_symbolic");
            for (int it_408_0 = 0; it_408_0 < 10; it_408_0 ++) {
                klee_prefer_cex(get_chain_get_chain_return_symbolic, get_chain_get_chain_return_symbolic[it_408_0] >= -10  & get_chain_get_chain_return_symbolic[it_408_0] <= 10);
            }
        }
    #endif
    if (cntCall == 10) {
        cntCall--;
    }
    return get_chain_get_chain_return_symbolic[cntCall++];
}



#pragma region regression
TEST(regression, worker_test_1)
{
    int actual = worker(0, 0);
    EXPECT_EQ(0, actual);
}

TEST(regression, receiver_test_1)
{
    int actual = receiver(_receiver_f_stub, 'a');
    EXPECT_EQ(0, actual);
}

TEST(regression, receiver_test_2)
{
    int actual = receiver(_receiver_f_stub, 'b');
    EXPECT_EQ(8, actual);
}

TEST(regression, receiver_test_3)
{
    int actual = receiver(_receiver_f_stub, 'c');
    EXPECT_EQ(-1, actual);
}

TEST(regression, entry_point_func_test_1)
{
    entry_point_func();
}

TEST(regression, pointerParam_test_1)
{
    int x = 1;
    char actual = *pointerParam(_pointerParam_f_stub, &x);
    EXPECT_EQ('\0', actual);
    int expected_x = 1;
    EXPECT_EQ(expected_x, x);
}

TEST(regression, pointerParam_test_2)
{
    int x = 0;
    char actual = *pointerParam(_pointerParam_f_stub, &x);
    EXPECT_EQ('\0', actual);
    int expected_x = 0;
    EXPECT_EQ(expected_x, x);
}

TEST(regression, pointerToPointer_test_1)
{
    pointerToPointer_f_arg f[10];
    for (int i = 0; i < 10; i ++) {
        f[i] = *_pointerToPointer_f_stub;
    }
    char actual = pointerToPointer(f, 'b');
    EXPECT_EQ('b', actual);
}

TEST(regression, pointerToPointer_test_2)
{
    pointerToPointer_f_arg f[10];
    for (int i = 0; i < 10; i ++) {
        f[i] = *_pointerToPointer_f_stub;
    }
    char actual = pointerToPointer(f, 'c');
    EXPECT_EQ('z', actual);
}

TEST(regression, structParam_test_1)
{
    char s[] = "zccccacca";
    int actual = structParam(_structParam_f_stub, s);
    EXPECT_EQ(0, actual);
}

TEST(regression, structParam_test_2)
{
    char s[] = "accccacca";
    int actual = structParam(_structParam_f_stub, s);
    EXPECT_EQ(6, actual);
}

TEST(regression, structParam_test_3)
{
    char s[] = "xccccacca";
    int actual = structParam(_structParam_f_stub, s);
    EXPECT_EQ(0, actual);
}

TEST(regression, structPointerParam_test_1)
{
    int arr[10] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    int actual = structPointerParam(_structPointerParam_f_stub, arr);
    EXPECT_EQ(12, actual);
}

TEST(regression, structPointerParam_test_2)
{
    int arr[10] = {0, 34, 0, 0, 0, 0, 0, 0, 0, 0};
    int actual = structPointerParam(_structPointerParam_f_stub, arr);
    EXPECT_EQ(1, actual);
}

TEST(regression, structPointerParam_test_3)
{
    int arr[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    int actual = structPointerParam(_structPointerParam_f_stub, arr);
    EXPECT_EQ(0, actual);
}

TEST(regression, f_add_test_1)
{
    int actual = f_add(0, 0);
    EXPECT_EQ(0, actual);
}

TEST(regression, f_sub_test_1)
{
    int actual = f_sub(0, 0);
    EXPECT_EQ(0, actual);
}

TEST(regression, f_mul_test_1)
{
    int actual = f_mul(0, 0);
    EXPECT_EQ(0, actual);
}

TEST(regression, return_op_test_1)
{
    return_op('+');
}

TEST(regression, return_op_test_2)
{
    return_op('*');
}

TEST(regression, return_op_test_3)
{
    return_op('-');
}

TEST(regression, return_op_test_4)
{
    return_op('c');
}

TEST(regression, f_chain_test_1)
{
    f_chain_functions_arg functions[10];
    for (int i = 0; i < 10; i ++) {
        functions[i] = *_f_chain_functions_stub;
    }
    int actual = f_chain(functions, 0);
    EXPECT_EQ(0, actual);
}

TEST(regression, get_chain_test_1)
{
    char c[] = "c*******+";
    *(unsigned char *)get_chain(c);
    char expected_c[] = {'c', '*', '*', '*', '*', '*', '*', '*', '+', '\0'};
    for (int it_409_0 = 0; it_409_0 < 10; it_409_0 ++) {
        EXPECT_EQ(expected_c[it_409_0], c[it_409_0]);
    }
}

TEST(regression, get_chain_test_2)
{
    char c[] = "c*******-";
    *(unsigned char *)get_chain(c);
    char expected_c[] = {'c', '*', '*', '*', '*', '*', '*', '*', '-', '\0'};
    for (int it_410_0 = 0; it_410_0 < 10; it_410_0 ++) {
        EXPECT_EQ(expected_c[it_410_0], c[it_410_0]);
    }
}

TEST(regression, get_chain_test_3)
{
    char c[] = "c*******c";
    *(unsigned char *)get_chain(c);
    char expected_c[] = {'c', '*', '*', '*', '*', '*', '*', '*', 'c', '\0'};
    for (int it_411_0 = 0; it_411_0 < 10; it_411_0 ++) {
        EXPECT_EQ(expected_c[it_411_0], c[it_411_0]);
    }
}

TEST(regression, calcFunctionStruct_test_1)
{
    int actual = calcFunctionStruct({
        .a = 0,
        .f = FStruct_f_stub}, 2);
    EXPECT_EQ(0, actual);
}

TEST(regression, calcFunctionStruct_test_2)
{
    int actual = calcFunctionStruct({
        .a = 0,
        .f = FStruct_f_stub}, 0);
    EXPECT_EQ(0, actual);
}

TEST(regression, apply_stub_test_1)
{
    struct Param param = {
        .x = 0};
    int actual = apply_stub({
        .f = Container_f_stub}, &param);
    EXPECT_EQ(0, actual);
    struct Param expected_param = {
        .x = 0};
    EXPECT_EQ(expected_param.x, param.x);
}

#pragma endregion
#pragma region error
TEST(error, apply_test_1)
{
    struct Param param = {
        .x = 0};
    apply({
        .f = Container_f_stub}, &param);
}

#pragma endregion
}
