/*
 * This file is automatically generated by UnitTestBot. For further information see https://github.com/UnitTestBot/UTBotCpp
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2021. All rights reserved.
 */

#include "types_3_test.h"

#include "gtest/gtest.h"
namespace UTBot {
static const float utbot_abs_error = 1e-6;
// Function 'extract_value' was skipped, as parameter 'arg' is not fully supported: Unsupported types in structs/unions

// Function 'sum_of' was skipped, as parameter 'arg' is not fully supported: Type has flexible array member

// Function 'create' was skipped, as return type 'struct Vector *' is not fully supported: Base type of array or pointer

// Function 'accept_incomplete' was skipped, as parameter 'arg' is not fully supported: Base type of array or pointer

// Function 'return_incomplete' was skipped, as return type 'struct IncompleteType *' is not fully supported: Base type of array or pointer



#pragma region regression

TEST(regression, extract_value_2_test_1)
{
    int actual = extract_value_2(from_bytes<UnnamedTypeStructField>({-1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}));
    EXPECT_EQ(0, actual);
}

TEST(regression, extract_value_2_test_2)
{
    int actual = extract_value_2(from_bytes<UnnamedTypeStructField>({0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}));
    EXPECT_EQ(0, actual);
}


TEST(regression, extract_value_3_test_1)
{
    int actual = extract_value_3(from_bytes<AnonymousUnionField>({0, 0, 0, 0}));
    EXPECT_EQ(0, actual);
}

TEST(regression, extract_value_3_test_2)
{
    int actual = extract_value_3(from_bytes<AnonymousUnionField>({1, 0, 0, 0}));
    EXPECT_EQ(1, actual);
}


TEST(regression, extract_value_4_test_1)
{
    int actual = extract_value_4(from_bytes<AnonymousStructField>({-1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}));
    EXPECT_EQ(0, actual);
}

TEST(regression, extract_value_4_test_2)
{
    int actual = extract_value_4(from_bytes<AnonymousStructField>({0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}));
    EXPECT_EQ(0, actual);
}


TEST(regression, pass_forward_decl_test_1)
{
    struct ForwardDecl arg = {0, 0};
    struct ForwardDecl actual = *pass_forward_decl(&arg);
    struct ForwardDecl expected = {0, 0};
    EXPECT_EQ(actual.x, expected.x);
    EXPECT_EQ(actual.y, expected.y);
    struct ForwardDecl expected_arg = {0, 0};
    EXPECT_EQ(expected_arg.x, arg.x);
    EXPECT_EQ(expected_arg.y, arg.y);
}


TEST(regression, mul_of_test_1)
{
    long actual = mul_of({0, {0, 0}});
    EXPECT_EQ(1L, actual);
}

TEST(regression, mul_of_test_2)
{
    long actual = mul_of({1, {-10, 0}});
    EXPECT_EQ(10L, actual);
}


TEST(regression, check_option_test_1)
{
    _Bool actual = check_option();
    EXPECT_EQ(true, actual);
}

#pragma endregion
#pragma region error
TEST(error, mul_of_test_3)
{
    mul_of({3, {0, 0}});
}

#pragma endregion
}
