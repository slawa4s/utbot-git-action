/*
 * This file is automatically generated by UnitTestBot. For further information see https://github.com/UnitTestBot/UTBotCpp
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2021. All rights reserved.
 */

#include "keywords_test.h"

#include "gtest/gtest.h"
namespace UTBot {
static const float utbot_abs_error = 1e-6;


#pragma region regression

TEST(regression, get_size_of_data_test_1)
{
    int actual = get_size_of_data({'c', {'c', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'b', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'c', 'a', 'b', 'c', 'c', 'c', 'c', 'c', 'b', 'c', 'c', 'c', 'c', 'c', 'b', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'c', 'c', 'c', 'b', 'a', 'c', 'c'}});
    EXPECT_EQ(256, actual);
}


TEST(regression, stop_now_test_1)
{
    stop_now(1);
}


TEST(regression, and_test_1)
{
    int actual = and_(0, 0);
    EXPECT_EQ(0, actual);
}


TEST(regression, using_test_1)
{
    int actual = using_(0);
    EXPECT_EQ(1, actual);
}


TEST(regression, different_test_1)
{
    char old[] = "baccccbaab";
    char new_[] = "aaccccccca";
    _Bool actual = different(old, new_);
    EXPECT_EQ(true, actual);
    char expected_old[] = {'b', 'a', 'c', 'c', 'c', 'c', 'b', 'a', 'a', '\0'};
    for (int it_3_0 = 0; it_3_0 < 10; it_3_0 ++) {
        EXPECT_EQ(expected_old[it_3_0], old[it_3_0]);
    }
    char expected_new_[] = {'a', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '\0'};
    for (int it_4_0 = 0; it_4_0 < 10; it_4_0 ++) {
        EXPECT_EQ(expected_new_[it_4_0], new_[it_4_0]);
    }
}

typedef void (*not_null_catch__arg)(int);
void _not_null_catch__stub(int param1) {
    return;
}


TEST(regression, not_null_test_1)
{
    unsigned char x = 99;
    unsigned char actual = *not_null(_not_null_catch__stub, &x);
    EXPECT_EQ(99, actual);
    unsigned char expected_x = 99;
    EXPECT_EQ(expected_x, x);
}


TEST(regression, get_flag_test_1)
{
    _Bool actual = get_flag({false});
    EXPECT_EQ(false, actual);
}


TEST(regression, cast_test_1)
{
    __attribute__ ((aligned(128))) unsigned char x = 0;
    unsigned char actual = *cast(&x);
    EXPECT_EQ(0, actual);
    void expected_x = 0;
    EXPECT_EQ(expected_x, x);
}


TEST(regression, equals_test_1)
{
    _Bool actual = equals({0L, 0L});
    EXPECT_EQ(true, actual);
}


TEST(regression, access_to_int_test_1)
{
    int actual = access_to_int(public_);
    EXPECT_EQ(2, actual);
}

TEST(regression, access_to_int_test_2)
{
    int actual = access_to_int(private_);
    EXPECT_EQ(0, actual);
}

TEST(regression, access_to_int_test_3)
{
    int actual = access_to_int(protected_);
    EXPECT_EQ(1, actual);
}

#pragma endregion
#pragma region error
TEST(error, stop_now_test_2)
{
    stop_now(0);
}

#pragma endregion
}
