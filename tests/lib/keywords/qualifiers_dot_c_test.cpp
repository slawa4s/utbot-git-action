/*
 * This file is automatically generated by UnitTestBot. For further information seehttps://unittestbot.org
 */

#include "qualifiers_dot_c_test.h"

#include "gtest/gtest.h"
namespace UTBot {
static const float utbot_abs_error = 1e-6;


#pragma region regression
TEST(regression, c_strcmp_2_test_1)
{
    char a[] = "hacccacca";
    char b[] = "jcccccccc";
    int actual = c_strcmp_2(a, b);
    EXPECT_EQ(0, actual);
}

TEST(regression, c_strcmp_2_test_2)
{
    char a[] = "ccbccacca";
    char b[] = "ccccccccc";
    int actual = c_strcmp_2(a, b);
    EXPECT_EQ(0, actual);
}

TEST(regression, c_strcmp_2_test_3)
{
    char a[] = "cscccacca";
    char b[] = "ccccccccc";
    int actual = c_strcmp_2(a, b);
    EXPECT_EQ(0, actual);
}

TEST(regression, c_strcmp_2_test_4)
{
    char a[] = "cc";
    char b[] = "cc";
    int actual = c_strcmp_2(a, b);
    EXPECT_EQ(1, actual);
}

TEST(regression, c_strcmp_2_test_5)
{
    char a[] = "";
    char b[] = "";
    int actual = c_strcmp_2(a, b);
    EXPECT_EQ(1, actual);
}

TEST(regression, c_strcmp_2_test_6)
{
    char a[] = "ccacacccc";
    char b[] = "ccacacccc";
    int actual = c_strcmp_2(a, b);
    EXPECT_EQ(1, actual);
}

TEST(regression, ishello_2_test_1)
{
    char a[] = "hccaccccc";
    int actual = ishello_2(a);
    EXPECT_EQ(0, actual);
    char expected_a[] = {'h', 'c', 'c', 'a', 'c', 'c', 'c', 'c', 'c', '\0'};
    for (int it_286_0 = 0; it_286_0 < 10; it_286_0 ++) {
        EXPECT_EQ(expected_a[it_286_0], a[it_286_0]);
    }
}

TEST(regression, ishello_2_test_2)
{
    char a[] = "aacaccccc";
    int actual = ishello_2(a);
    EXPECT_EQ(0, actual);
    char expected_a[] = {'a', 'a', 'c', 'a', 'c', 'c', 'c', 'c', 'c', '\0'};
    for (int it_287_0 = 0; it_287_0 < 10; it_287_0 ++) {
        EXPECT_EQ(expected_a[it_287_0], a[it_287_0]);
    }
}

TEST(regression, ishello_2_test_3)
{
    char a[] = "hellocccc";
    int actual = ishello_2(a);
    EXPECT_EQ(0, actual);
    char expected_a[] = {'h', 'e', 'l', 'l', 'o', 'c', 'c', 'c', 'c', '\0'};
    for (int it_288_0 = 0; it_288_0 < 10; it_288_0 ++) {
        EXPECT_EQ(expected_a[it_288_0], a[it_288_0]);
    }
}

TEST(regression, ishello_2_test_4)
{
    char a[] = "hello";
    int actual = ishello_2(a);
    EXPECT_EQ(1, actual);
    char expected_a[] = {'h', 'e', 'l', 'l', 'o', '\0', 'c', 'c', 'c', '\0'};
    for (int it_289_0 = 0; it_289_0 < 10; it_289_0 ++) {
        EXPECT_EQ(expected_a[it_289_0], a[it_289_0]);
    }
}

TEST(regression, returns_pointer_with_min_modifier_test_1)
{
    const long long actual = *returns_pointer_with_min_modifier(0LL, 1LL);
    EXPECT_EQ(0LL, actual);
}

TEST(regression, returns_pointer_with_min_modifier_test_2)
{
    const long long actual = *returns_pointer_with_min_modifier(0LL, 0LL);
    EXPECT_EQ(0LL, actual);
}

TEST(regression, foo___test_1)
{
    char actual = *foo__(-1);
    EXPECT_EQ('-', actual);
}

TEST(regression, foo___test_2)
{
    char actual = *foo__(0);
    EXPECT_EQ('0', actual);
}

TEST(regression, foo___test_3)
{
    char actual = *foo__(2);
    EXPECT_EQ('1', actual);
}

TEST(regression, foo_bar_test_1)
{
    const char actual = *foo_bar(-1);
    EXPECT_EQ('-', actual);
}

TEST(regression, foo_bar_test_2)
{
    const char actual = *foo_bar(0);
    EXPECT_EQ('0', actual);
}

TEST(regression, foo_bar_test_3)
{
    const char actual = *foo_bar(2);
    EXPECT_EQ('1', actual);
}

TEST(regression, returns_struct_with_min_max_Q_test_1)
{
    const struct MinMaxQ actual = *returns_struct_with_min_max_Q(0, 1);
    struct MinMaxQ expected = {
        .a = 0,
        .b = 1,
        .chars = {'a', 'b', '\0'}};
}

TEST(regression, returns_struct_with_min_max_Q_test_2)
{
    const struct MinMaxQ actual = *returns_struct_with_min_max_Q(0, 0);
    struct MinMaxQ expected = {
        .a = 0,
        .b = 0,
        .chars = {'b', 'a', '\0'}};
}

#pragma endregion
}
