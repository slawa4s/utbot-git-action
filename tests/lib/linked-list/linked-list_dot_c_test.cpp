/*
 * This file is automatically generated by UnitTestBot. For further information seehttps://unittestbot.org
 */

#include "linked-list_dot_c_test.h"

#include "gtest/gtest.h"
namespace UTBot {
static const float utbot_abs_error = 1e-6;
// Some tests for function 'sum_list' were skipped, as execution of function is out of timeout.

// Some tests for function 'sign_sum' were skipped, as execution of function is out of timeout.

// Some tests for function 'len_bound' were skipped, as execution of function is out of timeout.


typedef int (*sort_list_with_comparator_cmp_arg)(int, int);
int sort_list_with_comparator_cmp_symbolic[10];
int _sort_list_with_comparator_cmp_stub(int param1, int param2) {
    static int firstTimeCall = 1;
    static int cntCall = 0;
    #ifdef KLEE_MODE
        if (firstTimeCall == 1) {
            firstTimeCall = 0;
            klee_make_symbolic(&sort_list_with_comparator_cmp_symbolic, sizeof(sort_list_with_comparator_cmp_symbolic), "sort_list_with_comparator_cmp_symbolic");
            for (int it_277_0 = 0; it_277_0 < 10; it_277_0 ++) {
                klee_prefer_cex(sort_list_with_comparator_cmp_symbolic, sort_list_with_comparator_cmp_symbolic[it_277_0] >= -10  & sort_list_with_comparator_cmp_symbolic[it_277_0] <= 10);
            }
        }
    #endif
    if (cntCall == 10) {
        cntCall--;
    }
    return sort_list_with_comparator_cmp_symbolic[cntCall++];
}


typedef int (*find_maximum_compare_arg)(int, int);
int find_maximum_compare_symbolic[10];
int _find_maximum_compare_stub(int param1, int param2) {
    static int firstTimeCall = 1;
    static int cntCall = 0;
    #ifdef KLEE_MODE
        if (firstTimeCall == 1) {
            firstTimeCall = 0;
            klee_make_symbolic(&find_maximum_compare_symbolic, sizeof(find_maximum_compare_symbolic), "find_maximum_compare_symbolic");
            for (int it_278_0 = 0; it_278_0 < 10; it_278_0 ++) {
                klee_prefer_cex(find_maximum_compare_symbolic, find_maximum_compare_symbolic[it_278_0] >= -10  & find_maximum_compare_symbolic[it_278_0] <= 10);
            }
        }
    #endif
    if (cntCall == 10) {
        cntCall--;
    }
    return find_maximum_compare_symbolic[cntCall++];
}


typedef char (*vowel_consonant_vowel_arg)(char);
char vowel_consonant_vowel_symbolic[10];
char _vowel_consonant_vowel_stub(char param1) {
    static int firstTimeCall = 1;
    static int cntCall = 0;
    #ifdef KLEE_MODE
        if (firstTimeCall == 1) {
            firstTimeCall = 0;
            klee_make_symbolic(&vowel_consonant_vowel_symbolic, sizeof(vowel_consonant_vowel_symbolic), "vowel_consonant_vowel_symbolic");
            for (int it_279_0 = 0; it_279_0 < 10; it_279_0 ++) {
                klee_prefer_cex(vowel_consonant_vowel_symbolic, vowel_consonant_vowel_symbolic[it_279_0] >= 'a' & vowel_consonant_vowel_symbolic[it_279_0] <= 'z' & vowel_consonant_vowel_symbolic[it_279_0] != '\0');
            }
        }
    #endif
    if (cntCall == 10) {
        cntCall--;
    }
    return vowel_consonant_vowel_symbolic[cntCall++];
}



#pragma region regression
TEST(regression, length_of_linked_list3_test_1)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar2 = {
        .x = 0,
        .next = (struct Node*) 0x0};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &utbotInnerVar2;
    int actual = length_of_linked_list3(&head);
    EXPECT_EQ(-1, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, length_of_linked_list3_test_2)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = NULL};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &utbotInnerVar1;
    int actual = length_of_linked_list3(&head);
    EXPECT_EQ(-1, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, length_of_linked_list3_test_3)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar2 = {
        .x = 0,
        .next = NULL};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &utbotInnerVar2;
    int actual = length_of_linked_list3(&head);
    EXPECT_EQ(3, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, length_of_linked_list3_test_4)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    int actual = length_of_linked_list3(&head);
    EXPECT_EQ(1, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, length_of_linked_list3_test_5)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = NULL};
    head.next = (struct Node*) &utbotInnerVar1;
    int actual = length_of_linked_list3(&head);
    EXPECT_EQ(2, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, length_of_linked_list2_test_1)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    head.next = (struct Node*) &head;
    int actual = length_of_linked_list2(&head);
    EXPECT_EQ(-2, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, length_of_linked_list2_test_2)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = (struct Node*) 0xff0000};
    head.next = (struct Node*) &utbotInnerVar1;
    int actual = length_of_linked_list2(&head);
    EXPECT_EQ(-1, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, length_of_linked_list2_test_3)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = NULL};
    head.next = (struct Node*) &utbotInnerVar1;
    int actual = length_of_linked_list2(&head);
    EXPECT_EQ(2, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, length_of_linked_list2_test_4)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    int actual = length_of_linked_list2(&head);
    EXPECT_EQ(1, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, sum_list_test_1)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    int actual = sum_list(&head);
    EXPECT_EQ(0, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, sign_sum_test_1)
{
    struct Node head = {
        .x = 1,
        .next = NULL};
    int actual = sign_sum(&head);
    EXPECT_EQ(1, actual);
    struct Node expected_head = {
        .x = 1,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, sign_sum_test_2)
{
    struct Node head = {
        .x = -10,
        .next = NULL};
    int actual = sign_sum(&head);
    EXPECT_EQ(-1, actual);
    struct Node expected_head = {
        .x = -10,
        .next = (struct Node*) 0xffffffff};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, sign_sum_test_3)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    int actual = sign_sum(&head);
    EXPECT_EQ(0, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, hard_length2_test_1)
{
    struct HardNode head = {
        .in = {
            .x = 0,
            .superIn = {
                .next = NULL,
                .step = 0},
            .d = 0.000000e+00},
        .letter = 'c',
        .randomRef = NULL};
    struct HardNode utbotInnerVar1 = {
        .in = {
            .x = 0,
            .superIn = {
                .next = NULL,
                .step = 0},
            .d = 0.000000e+00},
        .letter = '\0',
        .randomRef = NULL};
    head.in.superIn.next = (struct HardNode*) &utbotInnerVar1;
    utbotInnerVar1.in.superIn.next = (struct HardNode*) &utbotInnerVar1;
    int actual = hard_length2(&head);
    EXPECT_EQ(-1, actual);
    struct HardNode expected_head = {
        .in = {
            .x = 0,
            .superIn = {
                .next = NULL,
                .step = 0},
            .d = 0.000000e+00},
        .letter = 'c',
        .randomRef = NULL};
    EXPECT_EQ(expected_head.in.x, head.in.x);
    EXPECT_EQ(expected_head.in.superIn.step, head.in.superIn.step);
    EXPECT_NEAR(expected_head.in.d, head.in.d, utbot_abs_error);
    EXPECT_EQ(expected_head.letter, head.letter);
}

TEST(regression, hard_length2_test_2)
{
    struct HardNode head = {
        .in = {
            .x = 0,
            .superIn = {
                .next = NULL,
                .step = 0},
            .d = 0.000000e+00},
        .letter = 'c',
        .randomRef = NULL};
    struct HardNode utbotInnerVar1 = {
        .in = {
            .x = 0,
            .superIn = {
                .next = NULL,
                .step = 0},
            .d = 0.000000e+00},
        .letter = '\0',
        .randomRef = NULL};
    head.in.superIn.next = (struct HardNode*) &utbotInnerVar1;
    int actual = hard_length2(&head);
    EXPECT_EQ(2, actual);
    struct HardNode expected_head = {
        .in = {
            .x = 0,
            .superIn = {
                .next = NULL,
                .step = 0},
            .d = 0.000000e+00},
        .letter = 'c',
        .randomRef = NULL};
    EXPECT_EQ(expected_head.in.x, head.in.x);
    EXPECT_EQ(expected_head.in.superIn.step, head.in.superIn.step);
    EXPECT_NEAR(expected_head.in.d, head.in.d, utbot_abs_error);
    EXPECT_EQ(expected_head.letter, head.letter);
}

TEST(regression, hard_length2_test_3)
{
    struct HardNode head = {
        .in = {
            .x = 0,
            .superIn = {
                .next = NULL,
                .step = 0},
            .d = 0.000000e+00},
        .letter = 'c',
        .randomRef = NULL};
    int actual = hard_length2(&head);
    EXPECT_EQ(1, actual);
    struct HardNode expected_head = {
        .in = {
            .x = 0,
            .superIn = {
                .next = NULL,
                .step = 0},
            .d = 0.000000e+00},
        .letter = 'c',
        .randomRef = NULL};
    EXPECT_EQ(expected_head.in.x, head.in.x);
    EXPECT_EQ(expected_head.in.superIn.step, head.in.superIn.step);
    EXPECT_NEAR(expected_head.in.d, head.in.d, utbot_abs_error);
    EXPECT_EQ(expected_head.letter, head.letter);
}

TEST(regression, middle_length2_test_1)
{
    struct Kuku head = {
        .in = {
            .next = NULL,
            .letter = 'c'},
        .x = 0};
    struct Kuku utbotInnerVar1 = {
        .in = {
            .next = NULL,
            .letter = '\0'},
        .x = 0};
    head.in.next = (struct Kuku*) &utbotInnerVar1;
    int actual = middle_length2(&head);
    EXPECT_EQ(2, actual);
    struct Kuku expected_head = {
        .in = {
            .next = (struct Kuku*) 0x63636363,
            .letter = 'c'},
        .x = 0};
    EXPECT_EQ(expected_head.in.letter, head.in.letter);
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, middle_length2_test_2)
{
    struct Kuku head = {
        .in = {
            .next = NULL,
            .letter = 'c'},
        .x = 0};
    int actual = middle_length2(&head);
    EXPECT_EQ(1, actual);
    struct Kuku expected_head = {
        .in = {
            .next = (struct Kuku*) 0x63636363,
            .letter = 'c'},
        .x = 0};
    EXPECT_EQ(expected_head.in.letter, head.in.letter);
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, middle_length2_test_3)
{
    struct Kuku head = {
        .in = {
            .next = NULL,
            .letter = 'c'},
        .x = 0};
    struct Kuku utbotInnerVar1 = {
        .in = {
            .next = (struct Kuku*) 0x0,
            .letter = '\0'},
        .x = 0};
    head.in.next = (struct Kuku*) &utbotInnerVar1;
    int actual = middle_length2(&head);
    EXPECT_EQ(-1, actual);
    struct Kuku expected_head = {
        .in = {
            .next = (struct Kuku*) 0x63636363,
            .letter = 'c'},
        .x = 0};
    EXPECT_EQ(expected_head.in.letter, head.in.letter);
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, cycle_list3_test_1)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar2 = {
        .x = 0,
        .next = (struct Node*) 0x2};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &utbotInnerVar2;
    int actual = cycle_list3(&head);
    EXPECT_EQ(17, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, cycle_list3_test_2)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = NULL};
    head.next = (struct Node*) &utbotInnerVar1;
    int actual = cycle_list3(&head);
    EXPECT_EQ(-2, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, cycle_list3_test_3)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar2 = {
        .x = 0,
        .next = NULL};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &utbotInnerVar2;
    utbotInnerVar2.next = (struct Node*) &head;
    int actual = cycle_list3(&head);
    EXPECT_EQ(6, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, cycle_list3_test_4)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    head.next = (struct Node*) &head;
    int actual = cycle_list3(&head);
    EXPECT_EQ(1, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, cycle_list3_test_5)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    int actual = cycle_list3(&head);
    EXPECT_EQ(-1, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, cycle_list3_test_6)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar2 = {
        .x = 0,
        .next = NULL};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &utbotInnerVar2;
    int actual = cycle_list3(&head);
    EXPECT_EQ(-3, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, cycle_list3_test_7)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar2 = {
        .x = -1229539658,
        .next = NULL};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &utbotInnerVar2;
    utbotInnerVar2.next = (struct Node*) &utbotInnerVar2;
    int actual = cycle_list3(&head);
    EXPECT_EQ(4, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, cycle_list3_test_8)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = -2139062144,
        .next = NULL};
    struct Node utbotInnerVar2 = {
        .x = -2139062144,
        .next = NULL};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &utbotInnerVar2;
    utbotInnerVar2.next = (struct Node*) &utbotInnerVar1;
    int actual = cycle_list3(&head);
    EXPECT_EQ(5, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, cycle_list3_test_9)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = NULL};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &head;
    int actual = cycle_list3(&head);
    EXPECT_EQ(3, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, cycle_list3_test_10)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = NULL};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &utbotInnerVar1;
    int actual = cycle_list3(&head);
    EXPECT_EQ(2, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, len_bound_test_1)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    int actual = len_bound(&head, 1);
    EXPECT_EQ(1, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, len_bound_test_2)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    int actual = len_bound(&head, 0);
    EXPECT_EQ(-1, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, sort_list_test_1)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = -1,
        .next = NULL};
    struct Node utbotInnerVar2 = {
        .x = -2,
        .next = NULL};
    struct Node utbotInnerVar3 = {
        .x = -4,
        .next = NULL};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &utbotInnerVar2;
    utbotInnerVar2.next = (struct Node*) &utbotInnerVar3;
    int actual = sort_list(&head);
    EXPECT_EQ(-1, actual);
    struct Node expected_head = {
        .x = -2,
        .next = (struct Node*) 0xffffffff};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, sort_list_test_2)
{
    struct Node head = {
        .x = 1,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 2147483647,
        .next = NULL};
    struct Node utbotInnerVar2 = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar3 = {
        .x = 2113929215,
        .next = NULL};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &utbotInnerVar2;
    utbotInnerVar2.next = (struct Node*) &utbotInnerVar3;
    int actual = sort_list(&head);
    EXPECT_EQ(1, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, sort_list_test_3)
{
    struct Node head = {
        .x = 3,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 2147481602,
        .next = NULL};
    struct Node utbotInnerVar2 = {
        .x = -2013265921,
        .next = NULL};
    struct Node utbotInnerVar3 = {
        .x = -1879048192,
        .next = NULL};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &utbotInnerVar2;
    utbotInnerVar2.next = (struct Node*) &utbotInnerVar3;
    int actual = sort_list(&head);
    EXPECT_EQ(1, actual);
    struct Node expected_head = {
        .x = -2013265921,
        .next = (struct Node*) 0x87878787};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, sort_list_test_4)
{
    struct Node head = {
        .x = 1,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 2147483647,
        .next = NULL};
    struct Node utbotInnerVar2 = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar3 = {
        .x = -2147483648,
        .next = NULL};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &utbotInnerVar2;
    utbotInnerVar2.next = (struct Node*) &utbotInnerVar3;
    int actual = sort_list(&head);
    EXPECT_EQ(-1, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, sort_list_test_5)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar2 = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar3 = {
        .x = 0,
        .next = NULL};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &utbotInnerVar2;
    utbotInnerVar2.next = (struct Node*) &utbotInnerVar3;
    int actual = sort_list(&head);
    EXPECT_EQ(1, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, sort_list_test_6)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar2 = {
        .x = 84215045,
        .next = NULL};
    struct Node utbotInnerVar3 = {
        .x = 0,
        .next = (struct Node*) 0xff};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &utbotInnerVar2;
    utbotInnerVar2.next = (struct Node*) &utbotInnerVar3;
    int actual = sort_list(&head);
    EXPECT_EQ(0, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, sort_list_test_7)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 370546198,
        .next = NULL};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &utbotInnerVar1;
    int actual = sort_list(&head);
    EXPECT_EQ(0, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, sort_list_test_8)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    int actual = sort_list(&head);
    EXPECT_EQ(0, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, sort_list_with_comparator_test_1)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar2 = {
        .x = 84215045,
        .next = NULL};
    struct Node utbotInnerVar3 = {
        .x = 0,
        .next = NULL};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &utbotInnerVar2;
    utbotInnerVar2.next = (struct Node*) &utbotInnerVar3;
    int actual = sort_list_with_comparator(&head, _sort_list_with_comparator_cmp_stub);
    EXPECT_EQ(1, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, sort_list_with_comparator_test_2)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar2 = {
        .x = 84215045,
        .next = NULL};
    struct Node utbotInnerVar3 = {
        .x = 0,
        .next = NULL};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &utbotInnerVar2;
    utbotInnerVar2.next = (struct Node*) &utbotInnerVar3;
    int actual = sort_list_with_comparator(&head, _sort_list_with_comparator_cmp_stub);
    EXPECT_EQ(-1, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, sort_list_with_comparator_test_3)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar2 = {
        .x = 84215045,
        .next = NULL};
    struct Node utbotInnerVar3 = {
        .x = 0,
        .next = NULL};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &utbotInnerVar2;
    utbotInnerVar2.next = (struct Node*) &utbotInnerVar3;
    int actual = sort_list_with_comparator(&head, _sort_list_with_comparator_cmp_stub);
    EXPECT_EQ(-1, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, sort_list_with_comparator_test_4)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar2 = {
        .x = 84215045,
        .next = NULL};
    struct Node utbotInnerVar3 = {
        .x = 0,
        .next = NULL};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &utbotInnerVar2;
    utbotInnerVar2.next = (struct Node*) &utbotInnerVar3;
    int actual = sort_list_with_comparator(&head, _sort_list_with_comparator_cmp_stub);
    EXPECT_EQ(1, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, sort_list_with_comparator_test_5)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar2 = {
        .x = 84215045,
        .next = NULL};
    struct Node utbotInnerVar3 = {
        .x = 0,
        .next = NULL};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &utbotInnerVar2;
    utbotInnerVar2.next = (struct Node*) &utbotInnerVar3;
    int actual = sort_list_with_comparator(&head, _sort_list_with_comparator_cmp_stub);
    EXPECT_EQ(1, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, sort_list_with_comparator_test_6)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar2 = {
        .x = 84215045,
        .next = NULL};
    struct Node utbotInnerVar3 = {
        .x = 0,
        .next = (struct Node*) 0xff};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &utbotInnerVar2;
    utbotInnerVar2.next = (struct Node*) &utbotInnerVar3;
    int actual = sort_list_with_comparator(&head, _sort_list_with_comparator_cmp_stub);
    EXPECT_EQ(0, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, sort_list_with_comparator_test_7)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 370546198,
        .next = NULL};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &utbotInnerVar1;
    int actual = sort_list_with_comparator(&head, _sort_list_with_comparator_cmp_stub);
    EXPECT_EQ(0, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, sort_list_with_comparator_test_8)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    int actual = sort_list_with_comparator(&head, _sort_list_with_comparator_cmp_stub);
    EXPECT_EQ(0, actual);
    struct Node expected_head = {
        .x = 0,
        .next = NULL};
    EXPECT_EQ(expected_head.x, head.x);
}

TEST(regression, find_maximum_test_1)
{
    int actual = find_maximum(0, 0, _find_maximum_compare_stub);
    EXPECT_EQ(0, actual);
}

TEST(regression, find_maximum_test_2)
{
    int actual = find_maximum(0, 0, _find_maximum_compare_stub);
    EXPECT_EQ(0, actual);
}

TEST(regression, vowel_consonant_test_1)
{
    int actual = vowel_consonant('a', _vowel_consonant_vowel_stub);
    EXPECT_EQ(1, actual);
}

TEST(regression, vowel_consonant_test_2)
{
    int actual = vowel_consonant('a', _vowel_consonant_vowel_stub);
    EXPECT_EQ(1, actual);
}

TEST(regression, vowel_consonant_test_3)
{
    int actual = vowel_consonant('a', _vowel_consonant_vowel_stub);
    EXPECT_EQ(1, actual);
}

TEST(regression, vowel_consonant_test_4)
{
    int actual = vowel_consonant('a', _vowel_consonant_vowel_stub);
    EXPECT_EQ(1, actual);
}

TEST(regression, vowel_consonant_test_5)
{
    int actual = vowel_consonant('a', _vowel_consonant_vowel_stub);
    EXPECT_EQ(1, actual);
}

TEST(regression, vowel_consonant_test_6)
{
    int actual = vowel_consonant('a', _vowel_consonant_vowel_stub);
    EXPECT_EQ(1, actual);
}

TEST(regression, vowel_consonant_test_7)
{
    int actual = vowel_consonant('a', _vowel_consonant_vowel_stub);
    EXPECT_EQ(-1, actual);
}

#pragma endregion
#pragma region error
TEST(error, length_of_linked_list3_test_6)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = (struct Node*) 0xff};
    head.next = (struct Node*) &utbotInnerVar1;
    length_of_linked_list3(&head);
}

TEST(error, length_of_linked_list3_test_7)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = -1,
        .next = (struct Node*) 0xfffffff8};
    head.next = (struct Node*) &utbotInnerVar1;
    length_of_linked_list3(&head);
}

TEST(error, length_of_linked_list3_test_8)
{
    struct Node head = {
        .x = 0,
        .next = (struct Node*) 0xfffffff8};
    length_of_linked_list3(&head);
}

TEST(error, length_of_linked_list3_test_9)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = (struct Node*) 0x14e30400};
    head.next = (struct Node*) &utbotInnerVar1;
    length_of_linked_list3(&head);
}

TEST(error, length_of_linked_list3_test_10)
{
    struct Node head = {
        .x = 0,
        .next = (struct Node*) 0xff};
    length_of_linked_list3(&head);
}

TEST(error, length_of_linked_list2_test_5)
{
    struct Node head = {
        .x = 0,
        .next = (struct Node*) 0xfffffff8};
    length_of_linked_list2(&head);
}

TEST(error, length_of_linked_list2_test_6)
{
    struct Node head = {
        .x = 0,
        .next = (struct Node*) 0xfffdffff};
    length_of_linked_list2(&head);
}

TEST(error, sum_list_test_2)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = NULL};
    head.next = (struct Node*) &utbotInnerVar1;
    sum_list(&head);
}

TEST(error, sum_list_test_3)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 404232216,
        .next = (struct Node*) 0x18};
    head.next = (struct Node*) &utbotInnerVar1;
    sum_list(&head);
}

TEST(error, sum_list_test_4)
{
    struct Node head = {
        .x = 0,
        .next = (struct Node*) 0xff};
    sum_list(&head);
}

TEST(error, sign_sum_test_4)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = (struct Node*) 0x400008};
    head.next = (struct Node*) &utbotInnerVar1;
    sign_sum(&head);
}

TEST(error, sign_sum_test_5)
{
    struct Node head = {
        .x = 0,
        .next = (struct Node*) 0xff};
    sign_sum(&head);
}

TEST(error, sign_sum_test_6)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = NULL};
    head.next = (struct Node*) &utbotInnerVar1;
    sign_sum(&head);
}

TEST(error, hard_length2_test_4)
{
    struct HardNode head = {
        .in = {
            .x = 0,
            .superIn = {
                .next = (struct HardNode*) 0xfffffff8,
                .step = 0},
            .d = 0.000000e+00},
        .letter = 'c',
        .randomRef = (struct HardNode*) 0xffffffff};
    hard_length2(&head);
}

TEST(error, hard_length2_test_5)
{
    struct HardNode head = {
        .in = {
            .x = 0,
            .superIn = {
                .next = (struct HardNode*) 0xbf,
                .step = 0},
            .d = 0.000000e+00},
        .letter = 'c',
        .randomRef = NULL};
    hard_length2(&head);
}

TEST(error, middle_length2_test_4)
{
    struct Kuku head = {
        .in = {
            .next = (struct Kuku*) 0xff,
            .letter = 'c'},
        .x = 0};
    middle_length2(&head);
}

TEST(error, cycle_list3_test_11)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = -1,
        .next = (struct Node*) 0xffffffff};
    head.next = (struct Node*) &utbotInnerVar1;
    cycle_list3(&head);
}

TEST(error, cycle_list3_test_12)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = -1,
        .next = (struct Node*) 0xfffffff8};
    head.next = (struct Node*) &utbotInnerVar1;
    cycle_list3(&head);
}

TEST(error, cycle_list3_test_13)
{
    struct Node head = {
        .x = 0,
        .next = (struct Node*) 0xfffffff8};
    cycle_list3(&head);
}

TEST(error, cycle_list3_test_14)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 134744072,
        .next = (struct Node*) 0x8};
    head.next = (struct Node*) &utbotInnerVar1;
    cycle_list3(&head);
}

TEST(error, cycle_list3_test_15)
{
    struct Node head = {
        .x = 0,
        .next = (struct Node*) 0xfffdffff};
    cycle_list3(&head);
}

TEST(error, len_bound_test_3)
{
    struct Node head = {
        .x = 0,
        .next = (struct Node*) 0xff};
    len_bound(&head, 8);
}

TEST(error, len_bound_test_4)
{
    struct Node head = {
        .x = 0,
        .next = (struct Node*) 0xfffffff8};
    len_bound(&head, 8);
}

TEST(error, len_bound_test_5)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = (struct Node*) 0x8008};
    head.next = (struct Node*) &utbotInnerVar1;
    len_bound(&head, 8);
}

TEST(error, sort_list_test_9)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 2139062143,
        .next = NULL};
    struct Node utbotInnerVar2 = {
        .x = 0,
        .next = (struct Node*) 0x7f};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &utbotInnerVar2;
    sort_list(&head);
}

TEST(error, sort_list_test_10)
{
    struct Node head = {
        .x = 0,
        .next = (struct Node*) 0xfffffff8};
    sort_list(&head);
}

TEST(error, sort_list_test_11)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = (struct Node*) 0xdf};
    head.next = (struct Node*) &utbotInnerVar1;
    sort_list(&head);
}

TEST(error, sort_list_test_12)
{
    struct Node head = {
        .x = 0,
        .next = (struct Node*) 0xff};
    sort_list(&head);
}

TEST(error, sort_list_test_13)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = (struct Node*) 0x8};
    head.next = (struct Node*) &utbotInnerVar1;
    sort_list(&head);
}

TEST(error, sort_list_with_comparator_test_9)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 2139062143,
        .next = NULL};
    struct Node utbotInnerVar2 = {
        .x = 0,
        .next = (struct Node*) 0x7f};
    head.next = (struct Node*) &utbotInnerVar1;
    utbotInnerVar1.next = (struct Node*) &utbotInnerVar2;
    sort_list_with_comparator(&head, _sort_list_with_comparator_cmp_stub);
}

TEST(error, sort_list_with_comparator_test_10)
{
    struct Node head = {
        .x = 0,
        .next = (struct Node*) 0xfffffff8};
    sort_list_with_comparator(&head, _sort_list_with_comparator_cmp_stub);
}

TEST(error, sort_list_with_comparator_test_11)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = (struct Node*) 0xdf};
    head.next = (struct Node*) &utbotInnerVar1;
    sort_list_with_comparator(&head, _sort_list_with_comparator_cmp_stub);
}

TEST(error, sort_list_with_comparator_test_12)
{
    struct Node head = {
        .x = 0,
        .next = (struct Node*) 0xff};
    sort_list_with_comparator(&head, _sort_list_with_comparator_cmp_stub);
}

TEST(error, sort_list_with_comparator_test_13)
{
    struct Node head = {
        .x = 0,
        .next = NULL};
    struct Node utbotInnerVar1 = {
        .x = 0,
        .next = (struct Node*) 0x8};
    head.next = (struct Node*) &utbotInnerVar1;
    sort_list_with_comparator(&head, _sort_list_with_comparator_cmp_stub);
}

#pragma endregion
}
