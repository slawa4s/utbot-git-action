/*
 * This file is automatically generated by UnitTestBot. For further information seehttps://unittestbot.org
 */

#include "multi_arrays_dot_c_test.h"

#include "gtest/gtest.h"
namespace UTBot {
static const float utbot_abs_error = 1e-6;
// Some tests for function 'return_sign_sum_of_struct_array' were skipped, as execution of function is out of timeout.



#pragma region regression
TEST(regression, kek_test_1)
{
    int a[2][2] = {{0, 0}, {0, 0}};
    int actual = kek(a);
    EXPECT_EQ(1, actual);
    int expected_a[2][2] = {{0, 0}, {0, 0}};
    for (int it_363_0 = 0; it_363_0 < 2; it_363_0 ++) {
        for (int it_363_1 = 0; it_363_1 < 2; it_363_1 ++) {
            EXPECT_EQ(expected_a[it_363_0][it_363_1], a[it_363_0][it_363_1]);
        }
    }
}

TEST(regression, sumSign_test_1)
{
    int a[2][2] = {{0, 0}, {0, 0}};
    int actual = sumSign(a);
    EXPECT_EQ(0, actual);
    int expected_a[2][2] = {{0, 0}, {0, 0}};
    for (int it_364_0 = 0; it_364_0 < 2; it_364_0 ++) {
        for (int it_364_1 = 0; it_364_1 < 2; it_364_1 ++) {
            EXPECT_EQ(expected_a[it_364_0][it_364_1], a[it_364_0][it_364_1]);
        }
    }
}

TEST(regression, sumSign_test_2)
{
    int a[2][2] = {{0, 7}, {8, 1}};
    int actual = sumSign(a);
    EXPECT_EQ(1, actual);
    int expected_a[2][2] = {{0, 7}, {8, 1}};
    for (int it_365_0 = 0; it_365_0 < 2; it_365_0 ++) {
        for (int it_365_1 = 0; it_365_1 < 2; it_365_1 ++) {
            EXPECT_EQ(expected_a[it_365_0][it_365_1], a[it_365_0][it_365_1]);
        }
    }
}

TEST(regression, sumSign_test_3)
{
    int a[2][2] = {{4, 5}, {-3, -7}};
    int actual = sumSign(a);
    EXPECT_EQ(-1, actual);
    int expected_a[2][2] = {{4, 5}, {-3, -7}};
    for (int it_366_0 = 0; it_366_0 < 2; it_366_0 ++) {
        for (int it_366_1 = 0; it_366_1 < 2; it_366_1 ++) {
            EXPECT_EQ(expected_a[it_366_0][it_366_1], a[it_366_0][it_366_1]);
        }
    }
}

TEST(regression, value_test_1)
{
    int a[2][3] = {{0, 1, 0}, {0, 0, 0}};
    int actual = value(a);
    EXPECT_EQ(1, actual);
    int expected_a[2][3] = {{0, 1, 0}, {0, 0, 0}};
    for (int it_367_0 = 0; it_367_0 < 2; it_367_0 ++) {
        for (int it_367_1 = 0; it_367_1 < 3; it_367_1 ++) {
            EXPECT_EQ(expected_a[it_367_0][it_367_1], a[it_367_0][it_367_1]);
        }
    }
}

TEST(regression, value_test_2)
{
    int a[2][3] = {{1, 0, 0}, {0, 0, 0}};
    int actual = value(a);
    EXPECT_EQ(0, actual);
    int expected_a[2][3] = {{1, 0, 0}, {0, 0, 0}};
    for (int it_368_0 = 0; it_368_0 < 2; it_368_0 ++) {
        for (int it_368_1 = 0; it_368_1 < 3; it_368_1 ++) {
            EXPECT_EQ(expected_a[it_368_0][it_368_1], a[it_368_0][it_368_1]);
        }
    }
}

TEST(regression, value_test_3)
{
    int a[2][3] = {{0, 0, 0}, {1, 0, 0}};
    int actual = value(a);
    EXPECT_EQ(3, actual);
    int expected_a[2][3] = {{0, 0, 0}, {1, 0, 0}};
    for (int it_369_0 = 0; it_369_0 < 2; it_369_0 ++) {
        for (int it_369_1 = 0; it_369_1 < 3; it_369_1 ++) {
            EXPECT_EQ(expected_a[it_369_0][it_369_1], a[it_369_0][it_369_1]);
        }
    }
}

TEST(regression, value_test_4)
{
    int a[2][3] = {{0, 0, 0}, {0, 0, 0}};
    int actual = value(a);
    EXPECT_EQ(-1, actual);
    int expected_a[2][3] = {{0, 0, 0}, {0, 0, 0}};
    for (int it_370_0 = 0; it_370_0 < 2; it_370_0 ++) {
        for (int it_370_1 = 0; it_370_1 < 3; it_370_1 ++) {
            EXPECT_EQ(expected_a[it_370_0][it_370_1], a[it_370_0][it_370_1]);
        }
    }
}

TEST(regression, value2_test_1)
{
    int a[2][3] = {{0, 1, 0}, {0, 0, 0}};
    int actual = value2(a);
    EXPECT_EQ(1, actual);
    int expected_a[2][3] = {{0, 1, 0}, {0, 0, 0}};
    for (int it_371_0 = 0; it_371_0 < 2; it_371_0 ++) {
        for (int it_371_1 = 0; it_371_1 < 3; it_371_1 ++) {
            EXPECT_EQ(expected_a[it_371_0][it_371_1], a[it_371_0][it_371_1]);
        }
    }
}

TEST(regression, value2_test_2)
{
    int a[2][3] = {{1, 0, 0}, {0, 0, 0}};
    int actual = value2(a);
    EXPECT_EQ(0, actual);
    int expected_a[2][3] = {{1, 0, 0}, {0, 0, 0}};
    for (int it_372_0 = 0; it_372_0 < 2; it_372_0 ++) {
        for (int it_372_1 = 0; it_372_1 < 3; it_372_1 ++) {
            EXPECT_EQ(expected_a[it_372_0][it_372_1], a[it_372_0][it_372_1]);
        }
    }
}

TEST(regression, value2_test_3)
{
    int a[2][3] = {{0, 0, 0}, {1, 0, 0}};
    int actual = value2(a);
    EXPECT_EQ(3, actual);
    int expected_a[2][3] = {{0, 0, 0}, {1, 0, 0}};
    for (int it_373_0 = 0; it_373_0 < 2; it_373_0 ++) {
        for (int it_373_1 = 0; it_373_1 < 3; it_373_1 ++) {
            EXPECT_EQ(expected_a[it_373_0][it_373_1], a[it_373_0][it_373_1]);
        }
    }
}

TEST(regression, value2_test_4)
{
    int a[2][3] = {{0, 0, 0}, {0, 0, 0}};
    int actual = value2(a);
    EXPECT_EQ(-1, actual);
    int expected_a[2][3] = {{0, 0, 0}, {0, 0, 0}};
    for (int it_374_0 = 0; it_374_0 < 2; it_374_0 ++) {
        for (int it_374_1 = 0; it_374_1 < 3; it_374_1 ++) {
            EXPECT_EQ(expected_a[it_374_0][it_374_1], a[it_374_0][it_374_1]);
        }
    }
}

TEST(regression, some_method_test_1)
{
    int _pointer2d[2][2] = {{0, 0}, {1, 0}};
    int ** pointer2d = (int **) calloc(3, sizeof(int *));
    for (int it_375_0 = 0; it_375_0 < 2; it_375_0 ++) {
        pointer2d[it_375_0] = _pointer2d[it_375_0];
    }
    pointer2d[2] = NULL;
    int actual = some_method(pointer2d);
    EXPECT_EQ(2, actual);
    int expected_pointer2d[2][2] = {{0, 0}, {1, 0}};
    for (int it_376_0 = 0; it_376_0 < 2; it_376_0 ++) {
        for (int it_376_1 = 0; it_376_1 < 2; it_376_1 ++) {
            EXPECT_EQ(expected_pointer2d[it_376_0][it_376_1], _pointer2d[it_376_0][it_376_1]);
        }
    }
}

TEST(regression, some_method_test_2)
{
    int _pointer2d[2][2] = {{0, 1}, {0, 0}};
    int ** pointer2d = (int **) calloc(3, sizeof(int *));
    for (int it_377_0 = 0; it_377_0 < 2; it_377_0 ++) {
        pointer2d[it_377_0] = _pointer2d[it_377_0];
    }
    pointer2d[2] = NULL;
    int actual = some_method(pointer2d);
    EXPECT_EQ(1, actual);
    int expected_pointer2d[2][2] = {{0, 1}, {0, 0}};
    for (int it_378_0 = 0; it_378_0 < 2; it_378_0 ++) {
        for (int it_378_1 = 0; it_378_1 < 2; it_378_1 ++) {
            EXPECT_EQ(expected_pointer2d[it_378_0][it_378_1], _pointer2d[it_378_0][it_378_1]);
        }
    }
}

TEST(regression, some_method_test_3)
{
    int _pointer2d[2][2] = {{0, 0}, {0, 1}};
    int ** pointer2d = (int **) calloc(3, sizeof(int *));
    for (int it_379_0 = 0; it_379_0 < 2; it_379_0 ++) {
        pointer2d[it_379_0] = _pointer2d[it_379_0];
    }
    pointer2d[2] = NULL;
    int actual = some_method(pointer2d);
    EXPECT_EQ(3, actual);
    int expected_pointer2d[2][2] = {{0, 0}, {0, 1}};
    for (int it_380_0 = 0; it_380_0 < 2; it_380_0 ++) {
        for (int it_380_1 = 0; it_380_1 < 2; it_380_1 ++) {
            EXPECT_EQ(expected_pointer2d[it_380_0][it_380_1], _pointer2d[it_380_0][it_380_1]);
        }
    }
}

TEST(regression, some_method_test_4)
{
    int _pointer2d[2][2] = {{1, 0}, {0, 0}};
    int ** pointer2d = (int **) calloc(3, sizeof(int *));
    for (int it_381_0 = 0; it_381_0 < 2; it_381_0 ++) {
        pointer2d[it_381_0] = _pointer2d[it_381_0];
    }
    pointer2d[2] = NULL;
    int actual = some_method(pointer2d);
    EXPECT_EQ(0, actual);
    int expected_pointer2d[2][2] = {{1, 0}, {0, 0}};
    for (int it_382_0 = 0; it_382_0 < 2; it_382_0 ++) {
        for (int it_382_1 = 0; it_382_1 < 2; it_382_1 ++) {
            EXPECT_EQ(expected_pointer2d[it_382_0][it_382_1], _pointer2d[it_382_0][it_382_1]);
        }
    }
}

TEST(regression, some_method_test_5)
{
    int _pointer2d[2][2] = {{0, 0}, {0, 0}};
    int ** pointer2d = (int **) calloc(3, sizeof(int *));
    for (int it_383_0 = 0; it_383_0 < 2; it_383_0 ++) {
        pointer2d[it_383_0] = _pointer2d[it_383_0];
    }
    pointer2d[2] = NULL;
    int actual = some_method(pointer2d);
    EXPECT_EQ(-1, actual);
    int expected_pointer2d[2][2] = {{0, 0}, {0, 0}};
    for (int it_384_0 = 0; it_384_0 < 2; it_384_0 ++) {
        for (int it_384_1 = 0; it_384_1 < 2; it_384_1 ++) {
            EXPECT_EQ(expected_pointer2d[it_384_0][it_384_1], _pointer2d[it_384_0][it_384_1]);
        }
    }
}

TEST(regression, return_sign_sum_test_1)
{
    int actual = return_sign_sum({
        .a = {{{1, 0}, {0, 0}, {0, 0}}, {{0, 0}, {0, 0}, {0, 0}}}});
    EXPECT_EQ(1, actual);
}

TEST(regression, return_sign_sum_test_2)
{
    int actual = return_sign_sum({
        .a = {{{0, 0}, {0, 0}, {0, 0}}, {{0, 0}, {0, 0}, {0, 0}}}});
    EXPECT_EQ(0, actual);
}

TEST(regression, return_sign_sum_test_3)
{
    int actual = return_sign_sum({
        .a = {{{0, 2}, {-5, 6}, {1, -1}}, {{-9, -2}, {-1, -1}, {-1, 3}}}});
    EXPECT_EQ(-1, actual);
}

TEST(regression, return_sign_sum_of_struct_array_test_1)
{
    struct PointStruct arr[2][2] = {{{
        .x = 0,
        .y = 0}, {
        .x = 1,
        .y = 0}}, {{
        .x = 1,
        .y = 1}, {
        .x = 1,
        .y = 1}}};
    long long actual = return_sign_sum_of_struct_array(arr);
    EXPECT_EQ(5LL, actual);
    struct PointStruct expected_arr[2][2] = {{{
        .x = 0,
        .y = 0}, {
        .x = 1,
        .y = 0}}, {{
        .x = 1,
        .y = 1}, {
        .x = 1,
        .y = 1}}};
    for (int it_385_0 = 0; it_385_0 < 2; it_385_0 ++) {
        for (int it_385_1 = 0; it_385_1 < 2; it_385_1 ++) {
            EXPECT_EQ(expected_arr[it_385_0][it_385_1].x, arr[it_385_0][it_385_1].x);
            EXPECT_EQ(expected_arr[it_385_0][it_385_1].y, arr[it_385_0][it_385_1].y);
        }
    }
}

TEST(regression, return_sign_sum_of_struct_array_test_2)
{
    struct PointStruct arr[2][2] = {{{
        .x = 0,
        .y = 0}, {
        .x = 1,
        .y = 0}}, {{
        .x = 1,
        .y = 1}, {
        .x = 1,
        .y = 0}}};
    long long actual = return_sign_sum_of_struct_array(arr);
    EXPECT_EQ(4LL, actual);
    struct PointStruct expected_arr[2][2] = {{{
        .x = 0,
        .y = 0}, {
        .x = 1,
        .y = 0}}, {{
        .x = 1,
        .y = 1}, {
        .x = 1,
        .y = 0}}};
    for (int it_386_0 = 0; it_386_0 < 2; it_386_0 ++) {
        for (int it_386_1 = 0; it_386_1 < 2; it_386_1 ++) {
            EXPECT_EQ(expected_arr[it_386_0][it_386_1].x, arr[it_386_0][it_386_1].x);
            EXPECT_EQ(expected_arr[it_386_0][it_386_1].y, arr[it_386_0][it_386_1].y);
        }
    }
}

TEST(regression, point_quart_test_1)
{
    struct PointStruct _point[2][2] = {{{
        .x = 1,
        .y = 0}, {
        .x = 0,
        .y = 0}}, {{
        .x = 0,
        .y = 0}, {
        .x = 0,
        .y = 0}}};
    struct PointStruct ** point = (struct PointStruct **) calloc(3, sizeof(struct PointStruct *));
    for (int it_387_0 = 0; it_387_0 < 2; it_387_0 ++) {
        point[it_387_0] = _point[it_387_0];
    }
    point[2] = NULL;
    int actual = point_quart(point);
    EXPECT_EQ(4, actual);
    struct PointStruct expected_point[2][2] = {{{
        .x = 1,
        .y = 0}, {
        .x = 0,
        .y = 0}}, {{
        .x = 0,
        .y = 0}, {
        .x = 0,
        .y = 0}}};
    for (int it_388_0 = 0; it_388_0 < 2; it_388_0 ++) {
        for (int it_388_1 = 0; it_388_1 < 2; it_388_1 ++) {
            EXPECT_EQ(expected_point[it_388_0][it_388_1].x, _point[it_388_0][it_388_1].x);
            EXPECT_EQ(expected_point[it_388_0][it_388_1].y, _point[it_388_0][it_388_1].y);
        }
    }
}

TEST(regression, point_quart_test_2)
{
    struct PointStruct _point[2][2] = {{{
        .x = 1,
        .y = 1}, {
        .x = 0,
        .y = 0}}, {{
        .x = 0,
        .y = 0}, {
        .x = 0,
        .y = 0}}};
    struct PointStruct ** point = (struct PointStruct **) calloc(3, sizeof(struct PointStruct *));
    for (int it_389_0 = 0; it_389_0 < 2; it_389_0 ++) {
        point[it_389_0] = _point[it_389_0];
    }
    point[2] = NULL;
    int actual = point_quart(point);
    EXPECT_EQ(1, actual);
    struct PointStruct expected_point[2][2] = {{{
        .x = 1,
        .y = 1}, {
        .x = 0,
        .y = 0}}, {{
        .x = 0,
        .y = 0}, {
        .x = 0,
        .y = 0}}};
    for (int it_390_0 = 0; it_390_0 < 2; it_390_0 ++) {
        for (int it_390_1 = 0; it_390_1 < 2; it_390_1 ++) {
            EXPECT_EQ(expected_point[it_390_0][it_390_1].x, _point[it_390_0][it_390_1].x);
            EXPECT_EQ(expected_point[it_390_0][it_390_1].y, _point[it_390_0][it_390_1].y);
        }
    }
}

TEST(regression, point_quart_test_3)
{
    struct PointStruct _point[2][2] = {{{
        .x = 0,
        .y = 1}, {
        .x = 0,
        .y = 0}}, {{
        .x = 0,
        .y = 0}, {
        .x = 0,
        .y = 0}}};
    struct PointStruct ** point = (struct PointStruct **) calloc(3, sizeof(struct PointStruct *));
    for (int it_391_0 = 0; it_391_0 < 2; it_391_0 ++) {
        point[it_391_0] = _point[it_391_0];
    }
    point[2] = NULL;
    int actual = point_quart(point);
    EXPECT_EQ(2, actual);
    struct PointStruct expected_point[2][2] = {{{
        .x = 0,
        .y = 1}, {
        .x = 0,
        .y = 0}}, {{
        .x = 0,
        .y = 0}, {
        .x = 0,
        .y = 0}}};
    for (int it_392_0 = 0; it_392_0 < 2; it_392_0 ++) {
        for (int it_392_1 = 0; it_392_1 < 2; it_392_1 ++) {
            EXPECT_EQ(expected_point[it_392_0][it_392_1].x, _point[it_392_0][it_392_1].x);
            EXPECT_EQ(expected_point[it_392_0][it_392_1].y, _point[it_392_0][it_392_1].y);
        }
    }
}

TEST(regression, point_quart_test_4)
{
    struct PointStruct _point[2][2] = {{{
        .x = 0,
        .y = 0}, {
        .x = 0,
        .y = 0}}, {{
        .x = 0,
        .y = 0}, {
        .x = 0,
        .y = 0}}};
    struct PointStruct ** point = (struct PointStruct **) calloc(3, sizeof(struct PointStruct *));
    for (int it_393_0 = 0; it_393_0 < 2; it_393_0 ++) {
        point[it_393_0] = _point[it_393_0];
    }
    point[2] = NULL;
    int actual = point_quart(point);
    EXPECT_EQ(3, actual);
    struct PointStruct expected_point[2][2] = {{{
        .x = 0,
        .y = 0}, {
        .x = 0,
        .y = 0}}, {{
        .x = 0,
        .y = 0}, {
        .x = 0,
        .y = 0}}};
    for (int it_394_0 = 0; it_394_0 < 2; it_394_0 ++) {
        for (int it_394_1 = 0; it_394_1 < 2; it_394_1 ++) {
            EXPECT_EQ(expected_point[it_394_0][it_394_1].x, _point[it_394_0][it_394_1].x);
            EXPECT_EQ(expected_point[it_394_0][it_394_1].y, _point[it_394_0][it_394_1].y);
        }
    }
}

TEST(regression, return_struct_with_2d_array_test_1)
{
    struct IntArray actual = return_struct_with_2d_array(1);
    struct IntArray expected = {
        .ints = {{1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}}};
}

TEST(regression, return_struct_with_2d_array_test_2)
{
    struct IntArray actual = return_struct_with_2d_array(-10);
    struct IntArray expected = {
        .ints = {{-1, -2, -3, -4, -5}, {-1, -2, -3, -4, -5}}};
}

TEST(regression, return_struct_with_2d_array_test_3)
{
    struct IntArray actual = return_struct_with_2d_array(0);
    struct IntArray expected = {
        .ints = {{0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}}};
}

TEST(regression, sum_matrix_test_1)
{
    int matrix_c_buffer[3][2] = {{0, 0}, {0, 0}, {0, 0}};
    memcpy((void *) matrix_c, matrix_c_buffer, sizeof(matrix_c_buffer));
    int matrix_a_buffer[3][2] = {{-1, 0}, {0, 0}, {0, 0}};
    memcpy((void *) matrix_a, matrix_a_buffer, sizeof(matrix_a_buffer));
    int matrix_b_buffer[3][2] = {{0, 0}, {0, 0}, {0, 0}};
    memcpy((void *) matrix_b, matrix_b_buffer, sizeof(matrix_b_buffer));
    int actual = sum_matrix();
    EXPECT_EQ(-1, actual);
    int expected_matrix_c[3][2] = {{-1, 0}, {0, 0}, {0, 0}};
    for (int it_395_0 = 0; it_395_0 < 3; it_395_0 ++) {
        for (int it_395_1 = 0; it_395_1 < 2; it_395_1 ++) {
            EXPECT_EQ(expected_matrix_c[it_395_0][it_395_1], matrix_c[it_395_0][it_395_1]);
        }
    }
    int expected_matrix_a[3][2] = {{-1, 0}, {0, 0}, {0, 0}};
    for (int it_396_0 = 0; it_396_0 < 3; it_396_0 ++) {
        for (int it_396_1 = 0; it_396_1 < 2; it_396_1 ++) {
            EXPECT_EQ(expected_matrix_a[it_396_0][it_396_1], matrix_a[it_396_0][it_396_1]);
        }
    }
    int expected_matrix_b[3][2] = {{0, 0}, {0, 0}, {0, 0}};
    for (int it_397_0 = 0; it_397_0 < 3; it_397_0 ++) {
        for (int it_397_1 = 0; it_397_1 < 2; it_397_1 ++) {
            EXPECT_EQ(expected_matrix_b[it_397_0][it_397_1], matrix_b[it_397_0][it_397_1]);
        }
    }
}

TEST(regression, sum_matrix_test_2)
{
    int matrix_c_buffer[3][2] = {{0, 0}, {0, 0}, {0, 0}};
    memcpy((void *) matrix_c, matrix_c_buffer, sizeof(matrix_c_buffer));
    int matrix_a_buffer[3][2] = {{0, 0}, {0, 0}, {0, 0}};
    memcpy((void *) matrix_a, matrix_a_buffer, sizeof(matrix_a_buffer));
    int matrix_b_buffer[3][2] = {{0, 0}, {0, 0}, {0, 0}};
    memcpy((void *) matrix_b, matrix_b_buffer, sizeof(matrix_b_buffer));
    int actual = sum_matrix();
    EXPECT_EQ(0, actual);
    int expected_matrix_c[3][2] = {{0, 0}, {0, 0}, {0, 0}};
    for (int it_398_0 = 0; it_398_0 < 3; it_398_0 ++) {
        for (int it_398_1 = 0; it_398_1 < 2; it_398_1 ++) {
            EXPECT_EQ(expected_matrix_c[it_398_0][it_398_1], matrix_c[it_398_0][it_398_1]);
        }
    }
    int expected_matrix_a[3][2] = {{0, 0}, {0, 0}, {0, 0}};
    for (int it_399_0 = 0; it_399_0 < 3; it_399_0 ++) {
        for (int it_399_1 = 0; it_399_1 < 2; it_399_1 ++) {
            EXPECT_EQ(expected_matrix_a[it_399_0][it_399_1], matrix_a[it_399_0][it_399_1]);
        }
    }
    int expected_matrix_b[3][2] = {{0, 0}, {0, 0}, {0, 0}};
    for (int it_400_0 = 0; it_400_0 < 3; it_400_0 ++) {
        for (int it_400_1 = 0; it_400_1 < 2; it_400_1 ++) {
            EXPECT_EQ(expected_matrix_b[it_400_0][it_400_1], matrix_b[it_400_0][it_400_1]);
        }
    }
}

TEST(regression, sum_matrix_test_3)
{
    int matrix_c_buffer[3][2] = {{0, 0}, {0, 0}, {0, 0}};
    memcpy((void *) matrix_c, matrix_c_buffer, sizeof(matrix_c_buffer));
    int matrix_a_buffer[3][2] = {{2, 8}, {-1, -1}, {-2, -1}};
    memcpy((void *) matrix_a, matrix_a_buffer, sizeof(matrix_a_buffer));
    int matrix_b_buffer[3][2] = {{-1, -2}, {-1, -1}, {-2, 5}};
    memcpy((void *) matrix_b, matrix_b_buffer, sizeof(matrix_b_buffer));
    int actual = sum_matrix();
    EXPECT_EQ(3, actual);
    int expected_matrix_c[3][2] = {{1, 6}, {-2, -2}, {-4, 4}};
    for (int it_401_0 = 0; it_401_0 < 3; it_401_0 ++) {
        for (int it_401_1 = 0; it_401_1 < 2; it_401_1 ++) {
            EXPECT_EQ(expected_matrix_c[it_401_0][it_401_1], matrix_c[it_401_0][it_401_1]);
        }
    }
    int expected_matrix_a[3][2] = {{2, 8}, {-1, -1}, {-2, -1}};
    for (int it_402_0 = 0; it_402_0 < 3; it_402_0 ++) {
        for (int it_402_1 = 0; it_402_1 < 2; it_402_1 ++) {
            EXPECT_EQ(expected_matrix_a[it_402_0][it_402_1], matrix_a[it_402_0][it_402_1]);
        }
    }
    int expected_matrix_b[3][2] = {{-1, -2}, {-1, -1}, {-2, 5}};
    for (int it_403_0 = 0; it_403_0 < 3; it_403_0 ++) {
        for (int it_403_1 = 0; it_403_1 < 2; it_403_1 ++) {
            EXPECT_EQ(expected_matrix_b[it_403_0][it_403_1], matrix_b[it_403_0][it_403_1]);
        }
    }
}

TEST(regression, count_dashes_test_1)
{
    char argv_buffer[2][2] = {{'c', 'c'}, {'-', 'b'}};
    memcpy((void *) argv, argv_buffer, sizeof(argv_buffer));
    argc = 2;
    int actual = count_dashes();
    EXPECT_EQ(1, actual);
    char expected_argv = 'c';
    EXPECT_EQ(expected_argv, (**argv));
    int expected_argc = -1;
    EXPECT_EQ(expected_argc, argc);
}

TEST(regression, count_dashes_test_2)
{
    char argv_buffer[2][2] = {{'c', 'c'}, {'c', 'b'}};
    memcpy((void *) argv, argv_buffer, sizeof(argv_buffer));
    argc = 0;
    int actual = count_dashes();
    EXPECT_EQ(-1, actual);
    char expected_argv = 'c';
    EXPECT_EQ(expected_argv, (**argv));
    int expected_argc = -1;
    EXPECT_EQ(expected_argc, argc);
}

#pragma endregion
#pragma region error
TEST(error, count_dashes_test_3)
{
    char argv_buffer[2][2] = {{'c', 'c'}, {'-', 'b'}};
    memcpy((void *) argv, argv_buffer, sizeof(argv_buffer));
    argc = 10;
    count_dashes();
}

#pragma endregion
}
